"""Wrapper around Qt libraries to make it easier to swap out backends in the future
"""
from __future__ import print_function

import importlib
import os
import sys

# try importing Qt libraries in order of preference
qtLibs = ['PyQt5', 'PyQt4', 'PySide', 'PySide2', None]
for mod in qtLibs:
    if mod is None:
        raise Exception("Could not import any Qt libraries (tried PyQt5, PyQt4, PySide, PySide2).")
    try:
        importlib.import_module(mod)
        break
    except ImportError:
        pass

# If we are using PyQt4, ACQ4 requires API version 2 for QString and QVariant.
# Check for those here..
if 'PyQt4' in sys.modules:
    import sip

    for api in ['QString', 'QVariant']:
        try:
            v = sip.getapi(api)
            if v != 2:
                print("WARNING: ACQ4 requires the use of API version 2 for QString and QVariant, but %s=%s. "
                      "Correct this by calling \"import sip; sip.setapi('QString', 2); sip.setapi('QVariant', 2);\""
                      " _before_ importing PyQt4." % (api, v))
        except ValueError:
            sip.setapi(api, 2)
            print("SIP API", api)

import pyqtgraph as pg

# make one large namespace containing everything; pyqtgraph handles translation
# between different Qt versions
for mod in [pg.Qt, pg.Qt.QtGui, pg.Qt.QtCore, pg.Qt.QtTest, pg.Qt.QtWidgets]:
    ns = mod.__dict__.copy()
    # don't copy special variables like __name__, __file__, etc.
    for k in list(ns.keys()):
        if k.startswith('__'):
            ns.pop(k)
    globals().update(ns)

# signal disconnect with exception handling
# allows (calling disconnect even if no connection currently exists)
disconnect = pg.disconnect


def loadUiType(uiFile, package=None):
    """
    PySide lacks a "loadUiType" command like PyQt4's, so we have to convert
    the ui file to py code in-memory first and then execute it in a
    special frame to retrieve the form_class.

    The *package* argument must be specified if the ui file contains relative
    imports.

    from stackoverflow: http://stackoverflow.com/a/14195313/3781327
    """
    if QT_LIB == PYSIDE:
        from pysideuic import compileUi
    elif QT_LIB == PYSIDE2:
        from pyside2uic import compileUi
    elif QT_LIB == PYQT4:
        from PyQt4.uic import compileUi
    elif QT_LIB == PYQT5:
        from PyQt5.uic import compileUi

    import xml.etree.ElementTree as xml
    
    parsed = xml.parse(uiFile)
    widget_class = parsed.find('widget').get('class')
    form_class = parsed.find('class').text
    
    if package is None:
        globalns = {}
    else:
        globalns = {'__package__': package}

    # load, compile, and execute ui code
    o = _StringIO()
    compileUi(open(uiFile, 'r'), o, indent=0)
    pyc = compile(o.getvalue(), uiFile, 'exec')
    exec(pyc, globalns)

    #Fetch the base_class and form class based on their type in the xml from designer
    form_class = globalns['Ui_%s'%form_class]
    base_class = getattr(QtGui, widget_class)

    return form_class, base_class


def importTemplate(templateName):
    """Return the template class generated by a .ui file for the Qt system 
    currently in use.
    
    If the module path is relative (starts with "."), then the root package is
    inferred by inspecting the frame stack.
    
    For example::
    
        Ui_MainWindow = Qt.importTemplate('.MyTemplate')
        
        # For PyQt4, this is equivalent to
        from .MyTemplate import Ui_MainWindow
        
        # for PyQt5, this is equivalent to
        from .MyTemplate_pyqt5 import Ui_MainWindow
    """
    frame = sys._getframe().f_back
    pkg = frame.f_globals['__package__']

    # Find location of calling module
    modParts = pkg.split('.')
    mod = sys.modules[modParts.pop(0)]
    root = os.path.dirname(mod.__file__)

    # construct full path to ui file
    ndots = len(templateName) - len(templateName.lstrip('.'))
    if ndots > 1:
        modParts = modParts[:-ndots]
    pathParts = modParts + templateName.lstrip('.').split('.')
    uipath = os.path.join(root, *pathParts) + '.ui'
    if not os.path.isfile(uipath):
        raise ValueError("ui file not found: %r" % uipath)
    return loadUiType(uipath, package=pkg)[0]


class FlowLayout(pg.QtGui.QLayout):
    """From https://doc.qt.io/qtforpython/examples/example_widgets_layouts_flowlayout.html"""
    def __init__(self, parent=None):
        super().__init__(parent)

        if parent is not None:
            self.setContentsMargins(QMargins(0, 0, 0, 0))

        self._item_list = []

    def __del__(self):
        item = self.takeAt(0)
        while item:
            item = self.takeAt(0)

    def addItem(self, item):
        self._item_list.append(item)

    def clear(self):
        for i in reversed(range(self.count())):
            self.itemAt(i).widget().setParent(None)
        self._item_list = []

    def count(self):
        return len(self._item_list)

    def itemAt(self, index):
        if 0 <= index < len(self._item_list):
            return self._item_list[index]

        return None

    def takeAt(self, index):
        if 0 <= index < len(self._item_list):
            return self._item_list.pop(index)

        return None

    def expandingDirections(self):
        return Qt.Orientation(0)

    def hasHeightForWidth(self):
        return True

    def heightForWidth(self, width):
        return self._do_layout(QRect(0, 0, width, 0), True)

    def setGeometry(self, rect):
        super(FlowLayout, self).setGeometry(rect)
        self._do_layout(rect, False)

    def sizeHint(self):
        return self.minimumSize()

    def minimumSize(self):
        size = QSize()

        for item in self._item_list:
            size = size.expandedTo(item.minimumSize())

        size += QSize(2 * self.contentsMargins().top(), 2 * self.contentsMargins().top())
        return size

    def _do_layout(self, rect, test_only):
        x = rect.x()
        y = rect.y()
        line_height = 0
        spacing = self.spacing()

        for item in self._item_list:
            style = item.widget().style()
            layout_spacing_x = style.layoutSpacing(
                QSizePolicy.PushButton, QSizePolicy.PushButton, Qt.Horizontal
            )
            layout_spacing_y = style.layoutSpacing(
                QSizePolicy.PushButton, QSizePolicy.PushButton, Qt.Vertical
            )
            space_x = spacing + layout_spacing_x
            space_y = spacing + layout_spacing_y
            next_x = x + item.sizeHint().width() + space_x
            if next_x - space_x > rect.right() and line_height > 0:
                x = rect.x()
                y = y + line_height + space_y
                next_x = x + item.sizeHint().width() + space_x
                line_height = 0

            if not test_only:
                item.setGeometry(QRect(QPoint(x, y), item.sizeHint()))

            x = next_x
            line_height = max(line_height, item.sizeHint().height())

        return y + line_height - rect.y()
